/*
 * project1.cpp
 *
 *  Created on: Jan 30, 2021
 *      Author: aranawillow
 */

#include <iostream>
using namespace std;

class CSR {
	protected:
		int n; //The number of rows of the original matrix
		int cN = 0; //The current number of rows initialized
		int m; //The number of columns of the original matrix
		int nonZeros; //The number of non-zeros in the original matrix
		int currNonZeros = 0; //The current number of non-zeros initialized
		int* values; //Value array assuming all are integers
		int* rowPtr; //Array that contains number of non-zero elements in each row of the original matrix
		int* colPos; //Array that contains the column number from the original matrix of non-zero values
	public:
		CSR(); //default or empty constructor;
		CSR(CSR& matrixB); //copy constructor;
		CSR(int rows, int cols, int numNonZeros); //constructor that sets the number of rows, columns, and non-zero values
		int getNumRows(); //returns the number of initialized rows
		void addValue(int value); //add a new value in the values array
		void addColumn(int col); //add a column in the colPos array
		void addRow(int row); //add a row in the rowPtr array
		void display(); //print the contents of the three arrays. Each array must be on a different line(separated by a
		//new line character) and you have exactly a single space between each value printed
		int* matrixVectorMultiply(int* inputVector); //matrix-vector multiplication
		CSR* matrixMultiply(CSR& matrixB); //matrix-matrix multiplication
		~CSR(); //destructor
		int* getColumnVector(int col); //returns an array containing the values in the desired column
		int* getRowVec(int row); //returns an array containing the values in the desired row
};
CSR::CSR() {
	n = 0; //set every value to 0 or null
	cN = 0;
	m = 0;
	values = NULL;
	rowPtr = NULL;
	colPos = NULL;
	nonZeros = 0;
}
CSR::CSR(int rows, int cols, int numNonZeros) {
	n = rows; //initialize the total number of rows
	cN = 0; //start with 0 rows initialized because they have not been filled yet
	m = cols; //initialize the total number of columns
	nonZeros = numNonZeros;
	values = new int[nonZeros];
	colPos = new int[nonZeros];
	rowPtr = new int[n];
}
CSR::CSR(CSR& matrixB) {
	n = matrixB.n; //copy over the int values
	cN = matrixB.cN;
	m = matrixB.m;
	nonZeros = matrixB.nonZeros;
	currNonZeros = matrixB.currNonZeros;
	values = new int [nonZeros]; //make deep copies of values, colPos, and rowPtr
	for (int i = 0; i < nonZeros; ++i) {
		values[i] = matrixB.values[i];
	}
	colPos = new int[nonZeros];
	for(int i = 0; i < nonZeros; ++i) {
		colPos[i] = matrixB.colPos[i];
	}
	rowPtr = new int[n];
	for(int i = 0; i < n; ++i) {
		rowPtr[i] = matrixB.rowPtr[i];
	}
}

int CSR::getNumRows() {
	return n; //return the  number of rows
}

void CSR::addValue(int value) {
	values[currNonZeros] = value; //add the given value to the next uninitialized location in the values array
	++currNonZeros; //update the next uninitialized location/the number of nonZeros
}

void CSR::addColumn(int col) {
	colPos[currNonZeros - 1] = col; //add the given column to the colPos array at the next uninitialized location,
									//subtracting 1 because currNonZeros was updated in the addValue method
}

void CSR::addRow(int row) {
	if(cN == 0) { //check to see if this is the first row
		for(int i = 0; i < n; ++i) { //initialize all of the rows in rowPtr to 0
			rowPtr[i] = 0;
		}
	}
	if(row < (n - 1)) { //only do this if it is before the last row
		for(int i = row + 1; i < n; ++i){ //add one to every row to the right of the given row
			++rowPtr[i];
		}
	}
	++cN; //update the number of initialized rows
}

int* CSR::getColumnVector(int col) {
	int *colVector = new int[n]; //initialize a new vector with an index for every column
	int r;
	for(int i = 0; i < n; ++i) { //initialize each value to 0
		colVector[i] = 0;
	}
	bool found;
	int k, j;

	k = 0;
	for(int i = 0; i < n - 1;++i) { //check to see if each value is in the desired column and add it to colVector if so
		r = rowPtr[i + 1] - rowPtr[i];
		k = rowPtr[i];
		found = false;
		j = 0;
		while((j < r) && !found) {
			if(colPos[k] == col) {
				found = true;
				colVector[i] = values[k];
			}
			k++;
			j++;
		}
	}
	int p = rowPtr[n - 1];
	found = false;
	while((p < (nonZeros)) && (!found)) { //look at the last row to see if each value is in the desired column and add it to colVector if so
		if(colPos[p] == col) {
			colVector[n - 1] = values[p];
			found = true;
		}
		else {
			p++;
		}
	}
	return colVector;
}

int* CSR::getRowVec(int row) {
	int *vector = new int[n]; //initialize a vector with an index representing each value in the given row
	for(int i = 0; i < n; ++i) { //initialize each value to 0
		vector[i] = 0;
	}

	if(row < n - 1) { //ensure that this is not the last row
		for(int i = rowPtr[row]; i < rowPtr[row + 1]; ++i) {
			for(int j = 0; j < m; ++j) {
				if(colPos[i] == j)
					vector[j] = values[i]; //add the value if it is in the correct row
			}
		}
	} else {
		for(int i = rowPtr[row]; i < nonZeros; ++i) { //if this is the last row, check the remaining values
			for(int j = 0; j < m; ++j) {
				if(colPos[i] == j) {
					vector[j] = values[i];
				}
			}
		}
	}
	return vector;
}

void CSR::display() {
	int* currRow; //keep track of the current row to print
	for(int i = 0; i < n; ++i) { //step through each row of the matrix
		currRow = getRowVec(i);
		for(int j = 0; j < n; ++j) { //print out each value of that row
			cout << currRow[j] << " ";
		}
		cout << endl;
	}

	cout << "rowPtr: ";
	for(int i = 0; i < n; ++i) { //print out the contents of rowPtr
		cout << rowPtr[i] << " ";
	}

	cout << endl << "colPos: ";
	for(int i = 0; i < nonZeros; ++i) { //print out the contents of colPos
		cout << colPos[i] << " ";
	}

	cout << endl << "values: ";
	for(int i = 0; i < nonZeros; ++i) { //print out the contents of values
		cout << values[i] << " ";
	}
	cout << endl;
}

int* CSR::matrixVectorMultiply(int *inputVector) {
	int* outputVector = new int[n]; //make a new array that will have one value representing each row

	for(int i = 0; i < n; ++i) { //initialize the array contents to 0
		outputVector[i] = 0;
	}

	int sum = 0;
	int start, end;
	for(int i = 0; i < n; ++i) { //walk through each row
		sum = 0;
		start = rowPtr[i]; //begin at the first value in the row
		if((i + 1) == n) //if it is the last row
			end = nonZeros; //the last value in the row is the final value of the matrix
		else
			end = rowPtr[i + 1]; //otherwise, the end is the last value in the row

		for(int j = start; j < end; ++j) { //multiply each value in that row by the given vector and add it to a sum
			sum = sum + values[j] * inputVector[colPos[j]];
		}
		outputVector[i] = sum; //the sum is put into the correct row in the outputVector
	}
	return outputVector;
}

CSR* CSR::matrixMultiply(CSR& matrixB) {
	int* currRow; //the current row to multiply
	int* currCol; //the current column to multiply
	int sum = 0; //the sum of the row and column products
	CSR* product = new CSR(n, matrixB.m, n * matrixB.m); //initialize the product matrix with the first matrix's rows and the second matrix's columns
														//assume every value in the matrix is nonZero
	for(int i = 0; i < n; ++i) { //step through each row
		currRow = this->getRowVec(i); //get the current row
		for(int j = 0; j < n; ++j){ //step through each column
		currCol = matrixB.getColumnVector(j); //get the current column
			for(int k = 0; k < n; ++k) { //step through each value in the column/row
				sum += (currRow[k] * currCol[k]); //multiply the values in the current column and the current row and add to a sum
		}
			if(sum != 0) { //only add non-zero sums to the product matrix
			product->addValue(sum);
			product->addColumn(j);
			product->addRow(i);
			sum = 0; //reset sum to 0
			}
	}
}
	return product;
}

CSR::~CSR() {
	//delete the values, rowPtr, and colPos arrays and reset the number of rows, columns, and non-zero values to 0
	if(values != NULL) delete [] values;
	if(rowPtr != NULL) delete [] rowPtr;
	if(colPos != NULL) delete [] colPos;
	n = 0;
	m = 0;
	nonZeros = 0;
}

int main() {
	//declare initial variables
	CSR* A;
	CSR* B;
	int* aVector;
	int numRows, numColumns, numNonZeros;
	int row, col, value;

	//read in the first matrix;
	cin >> numRows >> numColumns;
	cin >> numNonZeros;

	A = new CSR(numRows, numColumns, numNonZeros);
	for(int i = 0; i < numNonZeros; ++i) {
		cin >> row >> col >> value;
		(*A).addValue(value);
		(*A).addRow(row);
		(*A).addColumn(col);
	}
	cout << "Matrix A:" << endl;
	(*A).display();

	CSR* C = new CSR(*A); //calling the copy constructor
	cout << "Copied Matrix C:" << endl;
	(*C).display();

	//read in the second matrix which is similar to the first into the CSR pointer B and display;
	cin >> numRows >> numColumns;
	cin >> numNonZeros;
	B = new CSR(numRows, numColumns, numNonZeros);
	for(int i = 0; i < numNonZeros; ++i) {
		cin >> row >> col >> value;
		(*B).addValue(value);
		(*B).addRow(row);
		(*B).addColumn(col);
	}
	cout << "Matrix B:" << endl;
	(*B).display();

	//read in the vector
	cin >> numColumns;
	aVector = new int[numColumns];
	for(int i = 0; i < numColumns; i++) {
		cin >> aVector[i];
	}
	cout << "Vector:" << endl;
	for(int i = 0; i < numColumns; ++i) {
		cout << aVector[i] << " ";
	}
	cout << endl;
	cout << "A*vector:" << endl;


	//Matrix-vector multiplication
	int* resultVector = (*A).matrixVectorMultiply(aVector);
	for(int i = 0; i < (*A).getNumRows(); ++i) {
		cout << resultVector[i] << " ";
	}
	cout << endl;

	//Matrix-matrix multiplication
	cout << "A*B:" << endl;
	CSR* resultMatrix = (*C).matrixMultiply(*B);
	(*resultMatrix).display();

	//call the destructors
	delete [] aVector;
	delete [] resultVector;
	delete A;
	delete B;
	delete C;
//	delete resultMatrix;

	return 0;
}




